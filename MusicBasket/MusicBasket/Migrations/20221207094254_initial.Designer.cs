// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicSpace.Domain;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MusicSpace.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220115202952__initial")]
    partial class _initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles");

                b.HasData(
                    new
                    {
                        Id = "2a3e0934-bf85-4fce-b893-af35699f116b",
                        ConcurrencyStamp = "e81fb74a-2484-40c2-9cb8-ccf991af9369",
                        Name = "admin",
                        NormalizedName = "ADMIN"
                    });
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");

                b.HasData(
                    new
                    {
                        UserId = "fbc402dc-ea0a-4c10-931e-454dba6f9bed",
                        RoleId = "2a3e0934-bf85-4fce-b893-af35699f116b"
                    });
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Album", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("CoverPath")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<DateTime>("ReleaseDate")
                    .HasColumnType("date");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.ToTable("Albums");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.AlbumPerformer", b =>
            {
                b.Property<string>("AlbumId")
                    .HasColumnType("text");

                b.Property<string>("PerformerId")
                    .HasColumnType("text");

                b.HasKey("AlbumId", "PerformerId")
                    .HasName("AlbumPerformer_pkey");

                b.HasIndex("PerformerId");

                b.ToTable("AlbumPerformers");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.ApplicationUser", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers");

                b.HasData(
                    new
                    {
                        Id = "fbc402dc-ea0a-4c10-931e-454dba6f9bed",
                        AccessFailedCount = 0,
                        ConcurrencyStamp = "eb84af1b-92b5-4cd3-8719-7516288a9763",
                        Email = "admin@email.com",
                        EmailConfirmed = true,
                        LockoutEnabled = false,
                        NormalizedEmail = "ADMIN@EMAIL.COM",
                        NormalizedUserName = "ADMIN",
                        PasswordHash = "AQAAAAEAACcQAAAAEGG5EA5qhQwn3Ug3q1I51y6ES7LWElL3OZfz9XFoAC05miqs1zThEi0MsJzt0uRE1w==",
                        PhoneNumberConfirmed = false,
                        SecurityStamp = "",
                        TwoFactorEnabled = false,
                        UserName = "admin"
                    });
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.ChartSong", b =>
            {
                b.Property<string>("ChartId")
                    .HasColumnType("text");

                b.Property<string>("SongId")
                    .HasColumnType("text");

                b.Property<int>("Spot")
                    .HasColumnType("integer");

                b.HasKey("ChartId", "SongId")
                    .HasName("ChartSong_pkey");

                b.HasIndex("SongId");

                b.ToTable("ChartSongs");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Performer", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("AvatarPath")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PerformerName")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("PerformerName")
                    .IsUnique()
                    .HasDatabaseName("PerformerName_unique");

                b.ToTable("Performers");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Song", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("AlbumId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int?>("ChartListensNumber")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasDefaultValueSql("0");

                b.Property<string>("CoverPath")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<int>("DurationSec")
                    .HasColumnType("integer");

                b.Property<int?>("ListensNumber")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasDefaultValueSql("0");

                b.Property<DateTime>("ReleaseDate")
                    .HasColumnType("date");

                b.Property<string>("SongPath")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("AlbumId");

                b.ToTable("Songs");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.SongPerformer", b =>
            {
                b.Property<string>("SongId")
                    .HasColumnType("text");

                b.Property<string>("PerformerId")
                    .HasColumnType("text");

                b.HasKey("SongId", "PerformerId")
                    .HasName("SongPerformer_pkey");

                b.HasIndex("PerformerId");

                b.ToTable("SongPerformers");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.UserLibraryAlbum", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("AlbumId")
                    .HasColumnType("text");

                b.Property<DateTime>("AdditionDate")
                    .HasColumnType("date");

                b.Property<string>("UserLibraryAlbumId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("UserId", "AlbumId")
                    .HasName("UserLibraryAlbum_pkey");

                b.HasIndex("AlbumId");

                b.ToTable("UserLibraryAlbums");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.UserLibrarySong", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("SongId")
                    .HasColumnType("text");

                b.Property<DateTime>("AdditionDate")
                    .HasColumnType("date");

                b.Property<string>("UserLibrarySongId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("UserId", "SongId")
                    .HasName("UserLibrarySong_pkey");

                b.HasIndex("SongId");

                b.ToTable("UserLibrarySongs");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.WeeklyChart", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("ReleaseDate")
                    .HasColumnType("date");

                b.HasKey("Id");

                b.ToTable("WeeklyCharts");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.AlbumPerformer", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.Album", "Album")
                    .WithMany("AlbumPerformers")
                    .HasForeignKey("AlbumId")
                    .HasConstraintName("Album_fkey")
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.Performer", "Performer")
                    .WithMany("AlbumPerformers")
                    .HasForeignKey("PerformerId")
                    .HasConstraintName("Performer_fkey")
                    .IsRequired();

                b.Navigation("Album");

                b.Navigation("Performer");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.ChartSong", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.WeeklyChart", "Chart")
                    .WithMany("ChartSongs")
                    .HasForeignKey("ChartId")
                    .HasConstraintName("Chart_fkey")
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.Song", "Song")
                    .WithMany("ChartSongs")
                    .HasForeignKey("SongId")
                    .HasConstraintName("Song_fkey")
                    .IsRequired();

                b.Navigation("Chart");

                b.Navigation("Song");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Song", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.Album", "Album")
                    .WithMany("Songs")
                    .HasForeignKey("AlbumId")
                    .HasConstraintName("Album_fkey")
                    .IsRequired();

                b.Navigation("Album");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.SongPerformer", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.Performer", "Performer")
                    .WithMany("SongPerformers")
                    .HasForeignKey("PerformerId")
                    .HasConstraintName("Performer_fkey")
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.Song", "Song")
                    .WithMany("SongPerformers")
                    .HasForeignKey("SongId")
                    .HasConstraintName("Song_fkey")
                    .IsRequired();

                b.Navigation("Performer");

                b.Navigation("Song");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.UserLibraryAlbum", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.Album", "Album")
                    .WithMany("UserLibraryAlbums")
                    .HasForeignKey("AlbumId")
                    .HasConstraintName("Album_fkey")
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", "User")
                    .WithMany("UserLibraryAlbums")
                    .HasForeignKey("UserId")
                    .HasConstraintName("User_fkey")
                    .IsRequired();

                b.Navigation("Album");

                b.Navigation("User");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.UserLibrarySong", b =>
            {
                b.HasOne("MusicSpace.Domain.Entities.Song", "Song")
                    .WithMany("UserLibrarySongs")
                    .HasForeignKey("SongId")
                    .HasConstraintName("Song_fkey")
                    .IsRequired();

                b.HasOne("MusicSpace.Domain.Entities.ApplicationUser", "User")
                    .WithMany("UserLibrarySongs")
                    .HasForeignKey("UserId")
                    .HasConstraintName("User_fkey")
                    .IsRequired();

                b.Navigation("Song");

                b.Navigation("User");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Album", b =>
            {
                b.Navigation("AlbumPerformers");

                b.Navigation("Songs");

                b.Navigation("UserLibraryAlbums");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.ApplicationUser", b =>
            {
                b.Navigation("UserLibraryAlbums");

                b.Navigation("UserLibrarySongs");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Performer", b =>
            {
                b.Navigation("AlbumPerformers");

                b.Navigation("SongPerformers");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.Song", b =>
            {
                b.Navigation("ChartSongs");

                b.Navigation("SongPerformers");

                b.Navigation("UserLibrarySongs");
            });

            modelBuilder.Entity("MusicSpace.Domain.Entities.WeeklyChart", b =>
            {
                b.Navigation("ChartSongs");
            });
#pragma warning restore 612, 618
        }
    }
}
